G2 Reference for Michael
=========================

The purpose of this is to aggregate various ideas, topics and best practices when creating G2 Applications or working with G2 itself.

What is G2?
-----------

G2 is an **intelligent real-time system (IRTS)** for developing and deploying mission-critical, client/server applications.

Three Key Factors
-----------------

It's useful to ask yourself these three questions when creating G2 applications.

1. Does my application have to **integrate with external data**?
2. Does my domain require **user interaction**, possibly somewhere on the network?
3. Does my environment have a **well-defined physical representation**?

If you answer yes to all three of these, you will be using a large portion of G2's capabilities.

Knowledge Base(s)
-----------------

G2 applications are stored in knowledge bases.  A **knowledge base** or **KB** is an ASCII file with a .kb extension that contains all the information your application needs to run.

Modules
-------

A G2 application typically consist of numerous KB files, each containing one or more modules.  A **module** is a set of related information contained in a KB.  

**TIP:** Use modules to organize your application and to also exercise the DRY principle.

Modules can either be **independent** or **dependent**.  This represents whether or not they require other modules to run.

You use the G2 Foundation Resource **(GFR)** module to help manage your modules in an application.  For example, which modules G2 initializes first and which modules determine the overall behavior of the application.

The figure below shows several different module configurations of a video conferencing application.

.. image:: /img/g2/AppLayout1.PNG

G2 Objects
----------

G2 is an object-oriented development environment.  The *item* class is the root of the G2 class hierarchy that you can customize to capture your domain knowledge and *object* is a subclass in the item class hierarchy.

An **object** is a piece of information that contains all related knowledge in one location (same as other languages).  An object's data are called its **attributes** and an object's operations are called its **methods**  (nothing different there either).  Each object in the KB has an **icon** representation.  This means that you can use objects to communicate information graphically to the end-user.

Workspaces
----------

All created items in G2 are placed on **workspaces**.  It is good practice to name your workspaces so that you can refer to them later. Once you name workspaces, they can easily be accessed through the Get Workspace menu item.  A possible good layout may look as follows:

.. image:: /img/g2/WorkspaceLayout1.png

**Note:** Be sure to set the 'Top level module' if not already set.

Rules vs Procedures
--------------------

Rules
'''''

**Rules** help improve the application's ability to automate decision-making and respond to recognized events and changes in data.

* A rule can start with the *whenever* statement and can detect several events including when some attribute *receives a value* (meaning that its value has just been affected through some *conclude* action).  Other events can include when an item is moved on the workspace, and instance of some class is created, or two items become related or unrelated based on some user-defined relationship definition.

* Rules can refer to specific items, but it is best to make them generic.

* Every rules 'second half' (consequent) starts with the *then* keyword.  This can include multiple actions using the *and* keyword.

* A rule may start with *initially*, meaning that it evaluates upon every G2 start or restart or whenever its workspace is activated.  It remains inactive as long as G2 continues to run until the next Start/Restart.

Procedures
'''''''''''

**Procedures** allow you to create a set of *sequential* actions that need to be performed several times in varied situations and/or different data values.  Procedures may be started many ways including: other procedures, rules, or an action button initiated by a user.

Specifically, a procedure is executed when it appears in a *call* statement or a *start* action.  A procedure executes *synchronously* when called and *asynchronously* when started.

**Note** If using the *create* action along with the *transfer* action within something like a procedure to programatically create and move that  instance's icon to another workspace, for example, these instances are transient.  **Transient** instances are not considered a permanent part of the application's knowkedge and therefore will be deleted when Restarting G2 and will not be saved when you choose save kb.



Relationships
-------------

<add notes>

Connections
-----------

<add notes>

Inspect
-------

The **inspect tool** is a powerful tool available within G2 in order to perform many useful commands.  Here are *a few* that may be helpful for...

**...inspecting knowledge hierarchies**

- show on a workspace the class hierarchy
- show on a workspace the class hierarchy of variable
- show on a workspace the workspace hierarchy

**...displaying items**

- show on a workspace every printer
- show on a workspace every printer P such that the status of P = the symbol ok
- go to main-printer
- display a table [columnwise] of every printer
- display a table of every rule

**...text searches/replacements**

- highlight true in every printer
- highlight stat in every printer
- replace the word ok with good in every procedure

**...application consistency/ correctness**

- show on a workspace every item with notes
- show on a workspace every item with unsaved changes
- show on a workspace every item whose status is inactive
- show on a workspace every item whow status is disabled


Useful Hotkeys
--------------


Admin
'''''

=====================================================================================  ===========
Description                                                                            Hotkey
=====================================================================================  ===========
Change User Mode                                                                       Ctrl + y
<another description>                                                                  <hotkey>
=====================================================================================  ===========

Display
'''''''

=====================================================================================  ===========
Description                                                                            Hotkey
=====================================================================================  ===========
Expand/enlarge current window size to visible area:                                    Alt + .
Return current window to default size and center:                                      Ctrl + .
Enlarge current window viewing scale (bigger):                                         Ctrl + B
Reduce current window viewig scale (smaller):                                          Ctrl + S
=====================================================================================  ===========









